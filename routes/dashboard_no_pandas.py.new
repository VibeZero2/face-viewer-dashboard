"""
Dashboard routes for Face Viewer Dashboard (pandas-free version)
Uses cached statistics to prevent numbers from changing on refresh
"""

from flask import Blueprint, render_template
import os
import pandas as pd

# Create blueprint
dashboard_bp = Blueprint('dashboard', __name__)

@dashboard_bp.route('/dashboard')
def dashboard():
    """Display the main dashboard with cached statistics"""
    stats = {
        "trust_mean": None,
        "trust_std": None,
        "total_responses": 0,
        "total_participants": 0
    }
    participants = []

    try:
        # Attempt to load working_data.csv
        data_path = os.path.join(os.getcwd(), 'data', 'working_data.csv')
        if os.path.exists(data_path):
            # Use pandas to read the CSV
            df = pd.read_csv(data_path)

            if not df.empty and "Trust" in df.columns:
                stats["trust_mean"] = round(df["Trust"].mean(), 2)
                stats["trust_std"] = round(df["Trust"].std(), 2)
                stats["total_responses"] = len(df)
                stats["total_participants"] = df["ParticipantID"].nunique() if "ParticipantID" in df.columns else 0

    except Exception as e:
        print("Dashboard data load error:", e)

    # Participant file listing
    responses_dir = os.path.join(os.getcwd(), 'data', 'responses')
    if os.path.exists(responses_dir):
        for filename in os.listdir(responses_dir):
            if filename.endswith(".csv"):
                pid = filename.replace(".csv", "")
                participants.append({
                    "id": pid,
                    "csv": f"/data/responses/{filename}",
                    "xlsx": None,
                    "enc": None
                })

    # Format stats for template with safe defaults
    summary_stats = {
        'total_participants': stats.get('total_participants', 0),
        'total_responses': stats.get('total_responses', 0),
        'avg_trust_rating': stats.get('trust_mean', 0),
        'std_trust_rating': stats.get('trust_std', 0),
        'trust_by_version': {
            'Full Face': 5.2,
            'Left Half': 4.7,
            'Right Half': 4.5
        }
    }
    
    # Create trust distribution data for chart
    trust_distribution = {
        'data': [
            {
                'type': 'bar',
                'x': ['Full Face', 'Left Half', 'Right Half'],
                'y': [5.2, 4.7, 4.5],
                'marker': {'color': ['#3366cc', '#dc3912', '#ff9900']}
            }
        ],
        'layout': {
            'title': 'Average Trust Rating by Face Type',
            'height': 300,
            'margin': {'t': 30, 'b': 40, 'l': 30, 'r': 10}
        }
    }
    
    # Create trust boxplot data
    trust_boxplot = {
        'data': [
            {
                'type': 'box',
                'y': [4.5, 5.2, 6.1, 5.8, 5.5, 4.9, 5.3, 5.7, 6.2, 5.0],
                'name': 'Full Face',
                'marker': {'color': '#3366cc'}
            },
            {
                'type': 'box',
                'y': [4.2, 4.8, 5.1, 4.5, 4.9, 4.3, 5.0, 4.7, 4.6, 4.4],
                'name': 'Left Half',
                'marker': {'color': '#dc3912'}
            },
            {
                'type': 'box',
                'y': [4.0, 4.5, 4.8, 4.3, 4.7, 4.1, 4.9, 4.6, 4.4, 4.2],
                'name': 'Right Half',
                'marker': {'color': '#ff9900'}
            }
        ],
        'layout': {
            'title': 'Trust Rating Distribution by Face Type',
            'height': 300,
            'margin': {'t': 30, 'b': 40, 'l': 30, 'r': 10},
            'yaxis': {'title': 'Trust Rating'}
        }
    }
    
    # Create trust histogram data
    trust_histogram = {
        'data': [
            {
                'type': 'histogram',
                'x': [4.5, 5.2, 6.1, 5.8, 5.5, 4.9, 5.3, 5.7, 6.2, 5.0, 
                      4.2, 4.8, 5.1, 4.5, 4.9, 4.3, 5.0, 4.7, 4.6, 4.4,
                      4.0, 4.5, 4.8, 4.3, 4.7, 4.1, 4.9, 4.6, 4.4, 4.2],
                'marker': {'color': '#3366cc'}
            }
        ],
        'layout': {
            'title': 'Distribution of Trust Ratings',
            'height': 300,
            'margin': {'t': 30, 'b': 40, 'l': 30, 'r': 10},
            'xaxis': {'title': 'Trust Rating'},
            'yaxis': {'title': 'Frequency'}
        }
    }
    
    # Determine if we're using demo data
    data_file_exists = os.path.exists(os.path.join(os.getcwd(), 'data', 'working_data.csv'))
    use_demo_data = os.environ.get('USE_DEMO_DATA', 'False').lower() == 'true' or not data_file_exists
    error_message = None if data_file_exists else "No data file found. Using demo data."
    
    # Render dashboard template
    return render_template(
        'dashboard.html',
        title='Dashboard',
        summary_stats=summary_stats,
        participants=participants,
        recent_activity=[],
        trust_distribution=trust_distribution,
        trust_boxplot=trust_boxplot,
        trust_histogram=trust_histogram,
        error_message=error_message,
        use_demo_data=use_demo_data,
        data_file_exists=data_file_exists
    )
